{"version":3,"file":"static/js/414.4df35849.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/Form/Form.jsx","pages/Movies/Movies.jsx","services/tmbdApi.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport noImage from '../../images/noImage.png';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n\n  &:hover {\n    color: #4f46e5;\n  }\n`;\n\nexport const MovieLink = styled(Link)`\n  &:hover::after,\n  &:focus::after {\n    content: '';\n    background-image: ${props =>\n      props.cover\n        ? `url('https://image.tmdb.org/t/p/w500/${props.cover}')`\n        : `url(${noImage})`};\n\n    background-size: cover;\n    width: 400px;\n    height: 560px;\n    display: block;\n    border-radius: 4px;\n    border: 1px solid rgba(43, 134, 197);\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);\n    position: absolute;\n    top: 20%;\n    left: 50%;\n    z-index: 1;\n    color: #4f46e5;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport { List, Item, MovieLink } from './MovieList.styled';\n\nconst MovieList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {films.map(film => (\n        <Item key={film.id}>\n          <MovieLink\n            to={`/movies/${film.id}`}\n            state={{ from: location }}\n            cover={film.poster_path}\n          >\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default MovieList;\n","import { useState } from 'react';\n\nconst Form = ({ searchMovies }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searchMovies(query.toLowerCase());\n  };\n\n  return (\n    <form className=\"pb-4\" onSubmit={handleSubmit}>\n      <input\n        className=\"mr-2 min-w-0 rounded-md border-2 border-[#64748b] bg-[#6e7376]/5 px-3.5 py-2 text-[#000000] shadow-sm ring-1 ring-inset ring-white/10 focus:ring-2 focus:ring-inset focus:ring-indigo-500 sm:text-sm sm:leading-6\"\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        value={query}\n        onChange={handleInputChange}\n        placeholder=\"Enter Movie\"\n      />\n      <button\n        className=\"flex-none rounded-md bg-indigo-500 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500\"\n        type=\"submit\"\n      >\n        Search\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport EditorList from 'components/MovieList/MovieList';\nimport Form from 'components/Form/Form';\nimport { fetchSearchByKeyword } from 'services/tmbdApi';\n\nconst Movies = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [noMoviesText, setNoMoviesText] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movieName = searchParams.get('query') || '';\n\n  const updateQueryString = query => {\n    const nextParams = query !== '' && { query };\n    setSearchParams(nextParams);\n  };\n\n  useEffect(() => {\n    const search = async () => {\n      try {\n        setLoading(true);\n        const movies = await fetchSearchByKeyword(movieName);\n        setSearchFilms(movies);\n        setNoMoviesText(movies.length === 0);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    search();\n  }, [movieName]);\n\n  return (\n    <main>\n      <Form searchMovies={updateQueryString} />\n      {loading && <Loader />}\n      {noMoviesText && (\n        <p>There are no movies with this request. Please, try again...</p>\n      )}\n      {searchFilms.length > 0 && <EditorList films={searchFilms} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '4ccb1d05d841e073192ef611bb37b9bb';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["List","styled","_templateObject","_taggedTemplateLiteral","Item","_templateObject2","MovieLink","Link","_templateObject3","props","cover","concat","noImage","_ref","films","location","useLocation","_jsx","children","map","film","to","id","state","from","poster_path","title","searchMovies","_useState","useState","_useState2","_slicedToArray","query","setQuery","_jsxs","className","onSubmit","event","preventDefault","toLowerCase","type","name","autoFocus","value","onChange","target","placeholder","searchFilms","setSearchFilms","_useState3","_useState4","loading","setLoading","_useState5","_useState6","noMoviesText","setNoMoviesText","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","movieName","get","useEffect","search","_asyncToGenerator","_regeneratorRuntime","_callee","movies","_context","prev","next","fetchSearchByKeyword","sent","length","t0","console","error","finish","stop","apply","arguments","Form","Loader","EditorList","axios","API_KEY","fetchTrending","response","abrupt","data","results","_ref2","_callee2","keyword","_context2","_x","fetchMovieDetails","_ref3","_callee3","movieId","_context3","_x2","fetchActors","_ref4","_callee4","_context4","cast","_x3","fetchReviews","_ref5","_callee5","_context5","_x4"],"sourceRoot":""}